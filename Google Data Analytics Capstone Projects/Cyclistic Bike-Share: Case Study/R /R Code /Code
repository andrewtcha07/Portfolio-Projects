The 'Prepare' Phase

#################################################
# 1. Package Installation
#################################################
# Install required packages
install.packages("tidyverse")  # Data manipulation and visualization
install.packages("janitor")    # Data cleaning
install.packages("readr")      # Reading data
install.packages("dplyr")      # Data manipulation
install.packages("lubridate")  # Date-time manipulation
install.packages("tidyr")      # Data tidying
install.packages("ggmap")      # Plotting maps
install.packages("ggplot2")    # Plotting
install.packages("geosphere")  # Geographical calculations
install.packages("skimr")      # Summary statistics

#################################################
# 2. Library Loading
#################################################
# Load required libraries
library(tidyverse)   # Data manipulation and visualization
library(janitor)     # Data cleaning
library(readr)       # Reading data
library(dplyr)       # Data manipulation
library(lubridate)   # Date-time manipulation
library(tidyr)       # Data tidying
library(ggmap)       # Plotting maps
library(ggplot2)     # Plotting
library(geosphere)   # Geographical calculations
library(skimr)       # Summary statistics

#################################################
# 3. Data Import
#################################################
# Read CSV files for each month in 2023
jan2023 <- read_csv("202301-divvy-tripdata.csv")
feb2023 <- read_csv("202302-divvy-tripdata.csv")
mar2023 <- read_csv("202303-divvy-tripdata.csv")
apr2023 <- read_csv("202304-divvy-tripdata.csv")
may2023 <- read_csv("202305-divvy-tripdata.csv")
jun2023 <- read_csv("202306-divvy-tripdata.csv")
jul2023 <- read_csv("202307-divvy-tripdata.csv")
aug2023 <- read_csv("202308-divvy-tripdata.csv")
sep2023 <- read_csv("202309-divvy-tripdata.csv")
oct2023 <- read_csv("202310-divvy-tripdata.csv")
nov2023 <- read_csv("202311-divvy-tripdata.csv")
dec2023 <- read_csv("202312-divvy-tripdata.csv")

#################################################
# 4. Data Exploration
#################################################
# Display column names for each month's dataset
colnames(jan2023)
colnames(feb2023)
colnames(mar2023)
colnames(apr2023)
colnames(may2023)
colnames(jun2023)
colnames(jul2023)
colnames(aug2023)
colnames(sep2023)
colnames(oct2023)
colnames(nov2023)
colnames(dec2023)

# Display structure of each month's dataset
str(jan2023)
str(feb2023)
str(mar2023)
str(apr2023)
str(may2023)
str(jun2023)
str(jul2023)
str(aug2023)
str(sep2023)
str(oct2023)
str(nov2023)
str(dec2023)

# Display summary statistics for each month's dataset
summary(jan2023)
summary(feb2023)
summary(mar2023)
summary(apr2023)
summary(may2023)
summary(jun2023)
summary(jul2023)
summary(aug2023)
summary(sep2023)
summary(oct2023)
summary(nov2023)
summary(dec2023)

#################################################
# 5. Data Consolidation
#################################################
# Combine all monthly datasets into one
trip_data <- bind_rows(
  list(
    jan2023, 
    feb2023, 
    mar2023, 
    apr2023, 
    may2023, 
    jun2023, 
    jul2023, 
    aug2023, 
    sep2023, 
    oct2023, 
    nov2023, 
    dec2023
  )
)

# Remove individual monthly datasets from the environment
rm(
  list = c(
    "jan2023", 
    "feb2023", 
    "mar2023", 
    "apr2023", 
    "may2023", 
    "jun2023", 
    "jul2023", 
    "aug2023", 
    "sep2023", 
    "oct2023", 
    "nov2023", 
    "dec2023"
  )
)

#################################################
# 6. Consolidated Data Exploration
#################################################
# Check the class of the combined trip data
class(trip_data)

# Check the dimensions of the combined trip data
dim(trip_data)

# Display column names of the combined trip data
colnames(trip_data)

# Count the number of missing values in each column of the combined trip data
colSums(is.na(trip_data))

# Get the number of rows in the combined trip data
nrow(trip_data)

# Get the number of columns in the combined trip data
ncol(trip_data)

# Get the names of columns in the combined trip data
names(trip_data)

# Display the first few rows of the combined trip data
head(trip_data)

# Display the last few rows of the combined trip data
tail(trip_data)

# Display structure of the combined trip data
str(trip_data)

# Display a concise summary of the combined trip data
glimpse(trip_data)

# Display summary statistics of the combined trip data without charts
skim_without_charts(trip_data)

# Display summary statistics of the combined trip data
summary(trip_data)

#################################################
# 7. Missing Value Analysis
#################################################
# Attach the combined trip data to the search path
attach(trip_data)

# Display rows where ride_id is NA in the combined trip data
trip_data[is.na(ride_id),]

# Display rows where rideable_type is NA in the combined trip data
trip_data[is.na(rideable_type),]

# Display rows where started_at is NA in the combined trip data
trip_data[is.na(started_at),]

# Display rows where ended_at is NA in the combined trip data
trip_data[is.na(ended_at),]

# Display rows where start_station_name is NA in the combined trip data
trip_data[is.na(start_station_name),]

# Display rows where start_station_id is NA in the combined trip data
trip_data[is.na(start_station_id),]

# Display rows where end_station_name is NA in the combined trip data
trip_data[is.na(end_station_name),]

# Display rows where end_station_id is NA in the combined trip data
trip_data[is.na(end_station_id),]

# Display rows where start_lat is NA in the combined trip data
trip_data[is.na(start_lat),]

# Display rows where start_lng is NA in the combined trip data
trip_data[is.na(start_lng),]

# Display rows where end_lat is NA in the combined trip data
trip_data[is.na(end_lat),]

# Display rows where end_lng is NA in the combined trip data
trip_data[is.na(end_lng),]

# Display rows where member_casual is NA in the combined trip data
trip_data[is.na(member_casual),]

# Detach the combined trip data from the search path
detach(trip_data)

The 'Process' Phase

#################################################
# 1. Data Preparation: Renaming and Formatting
#################################################
# Renaming column "member_casual" to "user_type"
trip_data <- rename(trip_data, "user_type" = "member_casual")

# Converting "started_at" and "ended_at" columns to POSIXct format
trip_data$started_at <- ymd_hms(trip_data$started_at)
trip_data$ended_at <- ymd_hms(trip_data$ended_at)

# Checking for missing values in "started_at" column
sum(is.na(trip_data$started_at))

# Checking for missing values in "ended_at" column
sum(is.na(trip_data$ended_at))

#################################################
# 2. Data Preprocessing: Rounding Coordinates and Extracting Date Components
#################################################
# Rounding latitude and longitude coordinates to two decimal places
trip_data <- trip_data %>%
  mutate(
    start_lat = round(start_lat, digits = 2),
    start_lng = round(start_lng, digits = 2),
    end_lat = round(end_lat, digits = 2),
    end_lng = round(end_lng, digits = 2)
  )

# Converting "started_at" date-time column to date format
trip_data <- trip_data %>%
  mutate(date = as.Date(started_at))

# Extracting month from the "date" column
trip_data <- trip_data %>%
  mutate(month = format(date, "%B"))

# Extracting day from the "date" column
trip_data <- trip_data %>%
  mutate(day = format(date, "%d"))

# Extracting year from the "date" column
trip_data <- trip_data %>%
  mutate(year = format(date, "%Y"))

# Extracting day of the week from the "date" column
trip_data <- trip_data %>%
  mutate(day_of_week = format(date, "%A"))

# Extracting hour from the "started_at" date-time column
trip_data <- trip_data %>%
  mutate(hour = hour(started_at))

# Extracting quarter from the "started_at" date-time column
trip_data <- trip_data %>%
  mutate(quarter = quarter(started_at))

#################################################
# 3. Calculating Ride Length and Filtering Data
#################################################
# Calculating ride length in minutes and rounding to two decimal places
trip_data <- trip_data %>% 
  mutate(ride_length_minute = round(as.numeric(difftime(ended_at, started_at, units = "mins")), 2))

# Checking the class of the "ride_length_minute" variable
class(trip_data$ride_length_minute)

# Counting rides with duration less than 1 minute
sum(trip_data$ride_length_minute < 1, na.rm = TRUE)

# Counting rides with duration more than 24 hours (1440 minutes)
sum(trip_data$ride_length_minute > 1440, na.rm = TRUE)

# Counting rides with non-positive duration (less than or equal to 0)
sum(trip_data$ride_length_minute <= 0, na.rm = TRUE)

# Checking for rides where start time is after end time
sum(trip_data$started_at > trip_data$ended_at, na.rm = TRUE)

# Counting rides where start time is after end time using another method
length(which(trip_data$started_at > trip_data$ended_at))

#################################################
# 4. Data Imputation: Filling Missing Values
#################################################
# Checking missing values in specific columns
colSums(is.na(trip_data[c(
  "start_station_name", 
  "start_station_id", 
  "end_station_name", 
  "end_station_id", 
  "end_lat", 
  "end_lng")]))

# Filling missing values for start station name by grouping start latitude and longitude
trip_data <- trip_data %>%
  group_by(start_lat, start_lng) %>%
  fill(start_station_name, .direction = "downup") %>%
  ungroup()

# Filling missing values for end station name by grouping end latitude and longitude
trip_data <- trip_data %>%
  group_by(end_lat, end_lng) %>%
  fill(end_station_name, .direction = "downup") %>%
  ungroup()

# Filling missing values for start station ID by grouping start station name
trip_data <- trip_data %>%
  group_by(start_station_name) %>%
  fill(start_station_id, .direction = "downup") %>%
  ungroup()

# Filling missing values for end station ID by grouping end station name
trip_data <- trip_data %>%
  group_by(end_station_name) %>%
  fill(end_station_id, .direction = "downup") %>%
  ungroup()

# Rechecking missing values in specific columns after filling
colSums(is.na(trip_data[c(
  "start_station_name", 
  "start_station_id", 
  "end_station_name", 
  "end_station_id", 
  "end_lat", 
  "end_lng")]))

#################################################
# 5. Calculating Ride Distance
#################################################
# Calculating ride distance using great circle distance formula
trip_data$ride_distance <- distGeo(
  matrix(c(trip_data$start_lng, trip_data$start_lat), ncol = 2),
  matrix(c(trip_data$end_lng, trip_data$end_lat), ncol = 2))

# Converting ride distance from meters to kilometers
trip_data$ride_distance <- trip_data$ride_distance / 1000

# Converting ride distance from kilometers to miles
trip_data$ride_distance <- trip_data$ride_distance * 0.621371

#################################################
# 6. Analysis of Station Usage
#################################################
# Counting the number of rides per start station ID and arranging in descending order
trip_data %>% 
  select(start_station_id) %>% 
  count(start_station_id) %>% 
  arrange(desc(n))

# Counting the number of rides per end station ID and arranging in descending order
trip_data %>% 
  select(end_station_id) %>% 
  count(end_station_id) %>% 
  arrange(desc(n))

#################################################
# 7. Filtering Data and Analyzing Stations
#################################################
# Counting the number of rides for specific start stations
trip_data %>% filter(
  start_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  )
) %>% 
  count(start_station_id)

# Counting the number of rides for specific end stations
trip_data %>% filter(
  end_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  )
) %>% 
  count(end_station_id)

#################################################
# 8. Data Cleaning and Final Analysis
#################################################
# Filtering trip data to include rides with a duration between 1 minute and 1440 minutes (24 hours)
trip_data_updated <- trip_data %>% 
  filter(ride_length_minute >= 1 & ride_length_minute <= 1440)

# Removing rows with missing end latitude and longitude coordinates
trip_data_updated <- trip_data_updated[!is.na(trip_data_updated$end_lat) & !is.na(trip_data_updated$end_lng), ]

# Filtering out specific start stations from the trip data
trip_data_updated <- trip_data_updated %>% 
  filter(!
  start_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  ))

# Filtering out specific end stations from the trip data
trip_data_updated <- trip_data_updated %>% 
  filter(!
  end_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  ))

# Counting rides with duration less than 1 minute in the updated trip data
sum(trip_data_updated$ride_length_minute < 1)

# Counting rides with duration more than 24 hours (1440 minutes) in the updated trip data
sum(trip_data_updated$ride_length_minute > 1440)

The 'Analyze' Phase

str(trip_data_updated)

nrow(trip_data_updated)

glimpse(trip_data_updated)

summary(trip_data_updated)

colSums(is.na(trip_data_updated))

trip_data_updated %>%
  group_by(user_type) %>% 
  summarise(
    ride_count = n(),
    ride_percentage = round((n() / nrow(trip_data_updated)) * 100, 2))

ggplot(trip_data_updated, aes(user_type, fill=user_type),) +
  geom_bar() +
  labs(
    x="User Type", 
    y="Number of Rides", 
    title = "User Type Distribution: Casual vs. Member Riders") +
  scale_y_continuous(
    labels = function(x) format(x, scientific = FALSE)) +
  annotate("text", x = 1, y = 1800000, label = "1,970,463 / (36%)", color = "black", size = 3.5) +
  annotate("text", x = 2, y = 3350000, label = "3,509,441 / (64%)", color = "black", size = 3.5) +
  theme(
    axis.title.x = element_text(vjust = - 0.1),
    axis.title.y = element_text(vjust = 3.0))

trip_data_updated %>% 
  group_by(user_type) %>% 
  drop_na() %>%
  summarise(
    average_ride_distance = mean(ride_distance)) %>%
  mutate(average_ride_distance = round(average_ride_distance, 2))

trip_data_updated %>% 
  group_by(user_type) %>% 
  drop_na() %>%
  summarise(
    average_ride_distance = mean(ride_distance)) %>%
  mutate(average_ride_distance = round(average_ride_distance, 2)) %>% 
  ggplot() + 
  geom_col(mapping = aes(x = user_type, y = average_ride_distance, fill = user_type), show.legend = FALSE) +
  labs(
    x = "User Type", 
    y = "Distance (in miles)",
    title = "Average Travel Distance by User Type") +
  annotate("text", x = 1, y = 1.25, label = "1.35 miles", color = "black", size = 3.5) +
  annotate("text", x = 2, y = 1.25, label = "1.34 miles", color = "black", size = 3.5) +
  theme(
    axis.title.x = element_text(vjust = - 0.1),
    axis.title.y = element_text(vjust = 3.0))

trip_data_updated %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2),
    median_length = round(median(ride_length_minute), 2),
    max_ride_length = round(max(ride_length_minute), 2),
    min_ride_length = round(min(ride_length_minute), 2))

trip_data_updated %>%
  group_by(user_type) %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2),
    median_length = round(median(ride_length_minute), 2),
    max_ride_length = round(max(ride_length_minute), 2),
    min_ride_length = round(min(ride_length_minute), 2))

trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday",
    "Sunday"))

# Summarize the number of rides by user type and day of the week
trip_data_updated %>% 
  group_by(user_type, day_of_week) %>%
  summarise(
    number_of_rides = n(), .groups="drop") %>% 
    arrange(user_type, day_of_week)

trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday", 
    "Sunday"))

# Create a bar plot to visualize total rides by user type vs. day of the week
trip_data_updated %>%  
  group_by(user_type, day_of_week) %>% 
  summarise(
    number_of_rides = n(), .groups = "drop") %>% 
  arrange(user_type, day_of_week)  %>% 
  ggplot(aes(x = day_of_week, y = number_of_rides, fill = user_type)) +
  labs(
    x = "Day of Week", 
    y = "Number of Riders", 
    title = "Total Rides by User Type and Day of the Week") +
  geom_col(position = "dodge", width = 0.5) +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday",
    "Sunday"))

trip_data_updated %>% 
  group_by(user_type, day_of_week) %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), 
    .groups = "drop")

trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday",
    "Sunday"))

trip_data_updated %>% 
  group_by(user_type, day_of_week) %>% 
  summarise(
    count = n(),
    average_ride_length = mean(ride_length_minute), .groups = "drop") %>% 
  ggplot(aes(x = day_of_week, y = average_ride_length, fill = user_type)) + 
  geom_col(position = "dodge", width = 0.4) + 
  labs(
    x = "Day of Week",
    y = "Ride Length (in minutes)",
    title = "Average Ride Length by User Type and Day of the Week") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

# Summarize ride data by user type and month
trip_data_updated %>%  
  group_by(user_type, month) %>% 
  summarise(
    number_of_rides = n(), .groups = "drop") %>% 
  arrange(user_type, month)

trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

# Create a plot total rides by user type and month
trip_data_updated %>%  
  group_by(user_type, month) %>% 
  summarise(
    number_of_rides = n(), .groups = "drop") %>% 
  arrange(user_type, month) %>% 
  ggplot(aes(x = month, y = number_of_rides, color = user_type, group = user_type)) +
  labs(
    x = "Month", 
    y = "Number of Riders", 
    title = "Total Rides by User Type Over Months") +
  geom_line() +  # Add lines
  geom_point() +  # Add points
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0),
    axis.text.x = element_text(angle = 45, hjust = 1))

trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

trip_data_updated %>% 
  group_by(user_type, month) %>%
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups = "drop") %>% 
  arrange(user_type, month)

trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

trip_data_updated %>% 
  group_by(user_type, month) %>%
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups = "drop") %>% 
  arrange(user_type, month) %>% 
  ggplot(aes(x = month, y = average_ride_length, fill = user_type)) +
  labs(
    x = "Month", 
    y = "Ride Length (in minutes)", 
    title = "Average Ride Length by User Type Across Months") +
  geom_col(position = "dodge", width = 0.5) +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0),
    axis.text.x = element_text(angle = 45, hjust = 1))

trip_data_updated %>% 
  group_by(user_type, hour) %>% 
  summarise(
    count = n(), .groups = "drop") %>%
  arrange(user_type, hour)

trip_data_updated %>% 
  group_by(user_type, hour) %>% 
  summarise(
    count = n(), .groups = "drop") %>%
  arrange(user_type, hour) %>% 
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  labs(
    x = "Hour of day", 
    y = "Number of Rides", 
    title = "Total Rides by User Type Across Hours of the Day") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

trip_data_updated %>% 
  group_by(user_type, hour) %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups="drop") %>%
  arrange(user_type, hour)

trip_data_updated %>% 
  group_by(user_type, hour) %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups="drop") %>%
  arrange(user_type, hour) %>% 
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = average_ride_length, fill = user_type)) + 
  geom_col(position = "dodge") +
  labs(
    x = "Hour of day", 
    y = "Ride Length (in minutes)", 
    title = "Average Ride Length by User Type Across Hours of the Day") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

trip_data_updated %>%
  group_by(day_of_week, hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop")

# Visualize bike demand per hour by day of the week
trip_data_updated %>%
  group_by(day_of_week, hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = hour, y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour by Day of the Week") +
  facet_wrap(~ day_of_week) +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Monday
trip_data_updated %>%
  filter(day_of_week == "Monday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Monday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Tuesday
trip_data_updated %>%
  filter(day_of_week == "Tuesday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Tuesday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Wednesday
trip_data_updated %>%
  filter(day_of_week == "Wednesday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Wednesday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Thursday
trip_data_updated %>%
  filter(day_of_week == "Thursday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Thursday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Friday
trip_data_updated %>%
  filter(day_of_week == "Friday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Friday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Saturday
trip_data_updated %>%
  filter(day_of_week == "Saturday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Saturday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Sunday
trip_data_updated %>%
  filter(day_of_week == "Sunday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Sunday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

trip_data_updated %>%
  group_by(quarter, user_type) %>%
  summarise(
    number_of_users = n(), .groups = "drop")

trip_data_updated %>%
  group_by(quarter, user_type) %>%
  summarise(number_of_users = n(), .groups = "drop") %>%
  ggplot(aes(x = quarter, y = number_of_users, color = user_type)) +
  geom_line() +
  geom_point() +
  labs(
    x = "Quarter", 
    y = "Number of Riders", 
    title = "Distribution of User Types Over Quarters") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

trip_data_updated %>%
  group_by(user_type, rideable_type) %>%
  summarise(
    count = n(), .groups = "drop")

trip_data_updated %>%
  group_by(user_type, rideable_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = rideable_type, y = count, fill = user_type)) +
  labs(
    x = "Rideable Type", 
    y = "Number of Rides", 
    title = "Rideable Type Vs. Total Rides by User Types") +
  geom_col(position = "dodge") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

coordinates_df <- trip_data_updated %>%
  filter(start_lng != end_lng & start_lat != end_lat) %>%
  group_by(start_lng, start_lat, end_lng, end_lat, user_type, rideable_type) %>%
  summarise(
    total_rides = n(), .groups = "drop") %>%
  filter(total_rides > 200)

# Separate data for casual and member riders
casual_riders <- coordinates_df %>% filter(user_type == "casual")
member_riders <- coordinates_df %>% filter(user_type == "member")

# Define bounding box for Chicago
chicago <- c(left = -87.7738, bottom = 41.8096, right = -87.554855, top = 41.9653)
# Get map of Chicago
chicago_map <- get_stadiamap(bbox = chicago, zoom = 12, maptype = "stamen_terrain")

# Plot most used routes by casual riders on the map
ggmap(chicago_map, darken = c(0.1, "white")) +
   geom_point(data = casual_riders, aes(x = start_lng, y = start_lat, color = rideable_type), size = 2) +
   coord_fixed(0.8) +
   labs(
     x = NULL, 
     y = NULL, 
     title = "Most Used Routes by Casual Riders") +
   theme(legend.position = "right") +  # Position the legend
   scale_color_discrete(name = "Rideable Type")  # Add legend with discrete colors

# Plot most used routes by member riders on the map
ggmap(chicago_map, darken = c(0.1, "white")) +
    geom_point(data = member_riders, aes(x = start_lng, y = start_lat, color = rideable_type), size = 2) +  
    coord_fixed(0.8) +
    labs(
      x = NULL, 
      y = NULL,
      title = "Most Used Routes by Member Riders") +
    theme(legend.position = "right") +  # Position the legend
    scale_color_discrete(name = "Rideable Type")
