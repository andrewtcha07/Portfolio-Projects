#####################
# The 'Analyze' Phase
#####################

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Title: User Type Trends

# ----------------------
# User Type Distribution
# ----------------------

# library(dplyr)

# Group the data by the 'user_type' column and summarize
trip_data_updated %>%
  group_by(user_type) %>%
  summarise(
    # Calculate the count of rides for each user type
    ride_count = n(),
    # Calculate the percentage of rides for each user type
    ride_percentage = round((n() / nrow(trip_data_updated)) * 100, 2)
  )

# ------------------------------------------
# Average Ride Length (minutes) by User Type
# ------------------------------------------

# library(dplyr)

# Calculate average ride length by user type
trip_data_updated %>%
  group_by(user_type) %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2)) # Compute the average ride length for each user type

# ------------------------------------------
# Average Ride Distance (miles) by User Type
# ------------------------------------------

# library(dplyr)

# Calculate average ride distance by user type
trip_data_updated %>% 
  group_by(user_type) %>% 
  drop_na() %>% # Drop rows with missing values
  summarise(
    average_ride_distance = mean(ride_distance)) %>% # Calculate the average ride distance for each user type
  mutate(average_ride_distance = round(average_ride_distance, 2)) # Round the average ride distance to two decimal places

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Title: Hourly Trends

# --------------------
# Hourly User Overview
# --------------------

# library(dplyr)

# Group data by user type and hour of the day, calculate the count of rides, and arrange the results
trip_data_updated %>% 
  group_by(user_type, hour) %>% # Group data by user type and hour of the day
  summarise(
    ride_count = n(), .groups = "drop") %>% # Calculate the count of rides for each user type and hour of the day
  arrange(user_type, hour) # Arrange the results by user type and hour of the day

# ------------------------------------
# Hourly Average Ride Length (minutes)
# ------------------------------------

# library(dplyr)

# Group the data by user_type and hour, then count the number of rides in each group
trip_data_updated %>%
  group_by(user_type, hour) %>%
  summarise(
    ride_count = n(),  # Count the number of rides in each group
    .groups = "drop"  # Drop the grouping information from the output
  ) %>%
  arrange(user_type, hour)  # Arrange the results by user_type and hour

# ------------------------------------
# Hourly Average Ride Distance (miles)
# ------------------------------------

# library(dplyr)

# Group the data by user_type and hour, then calculate the average ride distance in each group
trip_data_updated %>%
  group_by(user_type, hour) %>%
  summarise(
    average_ride_distance = mean(ride_distance),  # Calculate the average ride distance in each group
    .groups = "drop"  # Drop the grouping information from the output
  ) %>%
  mutate(average_ride_distance = round(average_ride_distance, 2))  # Round the average ride distance to two decimal places

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Title: Weekly Trends

# --------------------
# Weekly User Overview
# --------------------

# library(dplyr)

# Ensure 'day_of_week' is ordered correctly as an ordered factor
trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday",
    "Sunday"))

# Summarize the number of rides by user_type and day_of_week
trip_data_updated %>% 
  group_by(user_type, day_of_week) %>% # Group the data by user_type and day_of_week
  summarise(
    ride_count = n(), .groups="drop") %>% # Calculate the number of rides in each group
  arrange(user_type, day_of_week) # Arrange the results by user_type and day_of_week

# ------------------------------------
# Weekly Average Ride Length (minutes)
# ------------------------------------

# library(dplyr)

# Ensure 'day_of_week' is ordered correctly as an ordered factor
trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday",
    "Sunday"))

# Summarize the number of rides and average ride length by user_type and day_of_week
trip_data_updated %>% 
  group_by(user_type, day_of_week) %>% # Group the data by user_type and day_of_week
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), # Calculate the average ride length in each group
    .groups = "drop") # Drop the grouping information from the output

# ------------------------------------
# Weekly Average Ride Distance (miles)
# ------------------------------------

# library(dplyr)

# Ensure 'day_of_week' is ordered correctly as an ordered factor
trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday",
    "Sunday"))

# Summarize the number of rides and average ride distance by user_type and day_of_week
trip_data_updated %>% 
  group_by(user_type, day_of_week) %>% # Group the data by user_type and day_of_week
  summarise(
    average_ride_distance = mean(ride_distance),  # Calculate the average ride distance in each group
    .groups = "drop"  # Drop the grouping information from the output
  ) %>%
  mutate(average_ride_distance = round(average_ride_distance, 2))  # Round the average ride distance to two decimal places

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Title: Weekly Bike Demands Patterns and Hourly Usage Trends

# ------------------------------
# Weekly and Hourly Bike Demands
# ------------------------------

# library(dplyr)

# Count of rides by day of the week, hour, and user type
trip_data_updated %>%
  group_by(day_of_week, hour, user_type) %>% # Group the data by day_of_week, hour, and user_type
  summarise(
    ride_count = n(), .groups = "drop") # Calculate the count of rides in each group

# --------------------------
# Monday Hourly Bike Demands
# --------------------------

# library(dplyr)

# Filter data to include only records for Mondays
trip_data_updated %>%
  filter(day_of_week == "Monday") %>% 
  group_by(day_of_week, hour, user_type) %>% # Group the filtered data by day_of_week, hour, and user_type
  summarise(
    ride_count = n(), .groups = "drop") %>% # Calculate the count of rides in each group
  arrange(user_type) # Arrange the results by user_type

# ---------------------------
# Tuesday Hourly Bike Demands
# ---------------------------

# library(dplyr)

# Filter data to include only records for Tuesdays
trip_data_updated %>%
  filter(day_of_week == "Tuesday") %>% 
  group_by(day_of_week, hour, user_type) %>% # Group the filtered data by day_of_week, hour, and user_type
  summarise(
    ride_count = n(), .groups = "drop") %>% # Calculate the count of rides in each group
  arrange(user_type) # Arrange the results by user_type

# -----------------------------
# Wednesday Hourly Bike Demands
# -----------------------------

# library(dplyr)

# Filter data to include only records for Wednesdays
trip_data_updated %>%
  filter(day_of_week == "Wednesday") %>% 
  group_by(day_of_week, hour, user_type) %>% # Group the filtered data by day_of_week, hour, and user_type
  summarise(
    ride_count = n(), .groups = "drop") %>% # Calculate the count of rides in each group
  arrange(user_type) # Arrange the results by user_type

# ----------------------------
# Thursday Hourly Bike Demands
# ----------------------------

# library(dplyr)

# Filter data to include only records for Thursdays
trip_data_updated %>%
  filter(day_of_week == "Thursday") %>% 
  group_by(day_of_week, hour, user_type) %>% # Group the filtered data by day_of_week, hour, and user_type
  summarise(
    ride_count = n(), .groups = "drop") %>% # Calculate the count of rides in each group
  arrange(user_type) # Arrange the results by user_type

# --------------------------
# Friday Hourly Bike Demands
# --------------------------

# library(dplyr)

# Filter data to include only records for Fridays
trip_data_updated %>%
  filter(day_of_week == "Friday") %>% 
  group_by(day_of_week, hour, user_type) %>% # Group the filtered data by day_of_week, hour, and user_type
  summarise(
    ride_count = n(), .groups = "drop") %>% # Calculate the count of rides in each group
  arrange(user_type) # Arrange the results by user_type


# ----------------------------
# Saturday Hourly Bike Demands
# ----------------------------

# library(dplyr)

# Filter data to include only records for Saturdays
trip_data_updated %>%
  filter(day_of_week == "Saturday") %>% 
  group_by(day_of_week, hour, user_type) %>% # Group the filtered data by day_of_week, hour, and user_type
  summarise(
    ride_count = n(), .groups = "drop") %>% # Calculate the count of rides in each group
  arrange(user_type) # Arrange the results by user_type

# --------------------------
# Sunday Hourly Bike Demands
# --------------------------

# library(dplyr)

# Filter data to include only records for Sundays
trip_data_updated %>%
  filter(day_of_week == "Sunday") %>% 
  group_by(day_of_week, hour, user_type) %>% # Group the filtered data by day_of_week, hour, and user_type
  summarise(
    ride_count = n(), .groups = "drop") %>% # Calculate the count of rides in each group
  arrange(user_type) # Arrange the results by user_type

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Title: Monthly Trends

# ---------------------
# Monthly User Overview
# ---------------------

# library(dplyr)

# Ensure proper ordering of months
trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

# Summarize ride data by user type and month
trip_data_updated %>%  
  group_by(user_type, month) %>%  # Group the data by user_type and month
  summarise(
    ride_count = n(), .groups = "drop") %>%  # Calculate the count of rides in each group
  arrange(user_type, month)  # Arrange the results by user_type and month

# -------------------------------------
# Monthly Average Ride Length (minutes)
# -------------------------------------

# library(dplyr)

# Ensure proper ordering of months
trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

# Summarize ride data by user type and month
trip_data_updated %>% 
  group_by(user_type, month) %>%  # Group the data by user_type and month
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups = "drop") %>%  # Calculate the average ride length in each group
  arrange(user_type, month)  # Arrange the results by user_type and month

# -------------------------------------
# Monthly Average Ride Distance (miles)
# -------------------------------------

# library(dplyr)

# Ensure proper ordering of months
trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

# Summarize ride data by user type and month
trip_data_updated %>% 
  group_by(user_type, month) %>%  # Group the data by user_type and month
  summarise(
    average_ride_distance = mean(ride_distance),  # Calculate the average ride distance in each group
    .groups = "drop"  # Drop the grouping information from the output
  ) %>%
  mutate(average_ride_distance = round(average_ride_distance, 2))  # Round the average ride distance to two decimal places

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Title: Quarterly Trends

# -----------------------
# Quarterly User Overview
# -----------------------

# library(dplyr)

# Summarizing the number of users by quarter and user type
trip_data_updated %>%
  group_by(quarter, user_type) %>%  # Group the data by quarter and user_type
  summarise(
    ride_count = n(), .groups = "drop") %>%  # Calculate the count of rides in each group
  arrange(user_type)  # Arrange the results by user_type

# ---------------------------------------
# Quarterly Average Ride Length (minutes)
# ---------------------------------------

# library(dplyr)

# Summarizing the average ride length by quarter and user type
trip_data_updated %>%
  group_by(quarter, user_type) %>%  # Group the data by quarter and user_type
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups="drop") %>%  # Calculate the average ride length in each group
  arrange(user_type)  # Arrange the results by user_type

# ---------------------------------------
# Quarterly Average Ride Distance (miles)
# ---------------------------------------

# library(dplyr)

# Summarizing the average ride distance by quarter and user type
trip_data_updated %>%
  group_by(quarter, user_type) %>%  # Group the data by quarter and user_type
  summarise(
    average_ride_distance = mean(ride_distance),  # Calculate the average ride distance in each group
    .groups = "drop"  # Drop the grouping information from the output
  ) %>%
  mutate(average_ride_distance = round(average_ride_distance, 2)) %>%  # Round the average ride distance to two decimal places
  arrange(user_type)  # Arrange the results by user_type

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Title: Rideable Trends

# --------------------
# Rideable Type Trends
# --------------------

# library(dplyr)

# Calculate the count of rides for each combination of user type and rideable type
trip_data_updated %>%
  group_by(user_type, rideable_type) %>%  # Group the data by user_type and rideable_type
  summarise(
    count = n(), .groups = "drop")  # Calculate the count of rides in each group

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Title: Map Trends

# -----------------------------------------------
# User Type Quarterly Destination Interactive Map
# -----------------------------------------------

# library(dplyr)

# Creating a new dataset for map data and remove any missing rows
mapping_data <- na.omit(trip_data_updated)

# Reformatting the quarter column to use "Q1", "Q2", "Q3", "Q4"
mapping_data$quarter <- paste("Q", mapping_data$quarter, sep = "")

# Filter out rows where start and end latitude and longitude are the same
mapping_data <- mapping_data %>%
  filter(start_lat != end_lat | start_lng != end_lng)

# Select a subset of the data for the sake of performance
subset <- sample_n(mapping_data, 500)

# Filter and arrange data for casual users
subset[, c("user_type", "quarter", "start_station_name", "end_station_name", "start_lat", "start_lng", "end_lat", "end_lng", "rideable_type")] %>% 
  filter(user_type == "casual") %>%  # Filter rows where user_type is "casual"
  arrange(quarter)  # Arrange the results by quarter

# Filter and arrange data for member users
subset[, c("user_type", "quarter", "start_station_name", "end_station_name", "start_lat", "start_lng", "end_lat", "end_lng", "rideable_type")] %>% 
  filter(user_type == "member") %>%  # Filter rows where user_type is "member"
  arrange(quarter)  # Arrange the results by quarter
