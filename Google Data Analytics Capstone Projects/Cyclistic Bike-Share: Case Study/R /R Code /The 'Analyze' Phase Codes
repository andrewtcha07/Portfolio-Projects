######################
# The 'Analyze' Phase
######################

# ---------------------------------
# Data Exploration and Validation
# ---------------------------------

# Inspecting Structure of Updated Trip Data
str(trip_data_updated)

# Counting Rows in Updated Trip Data
nrow(trip_data_updated)

# Display a concise summary of Updated Trip Data
glimpse(trip_data_updated)

# Display summary statistics of Updated Trip Data
summary(trip_data_updated)

# Count the number of missing values of Updated Trip Data
colSums(is.na(trip_data_updated))


# -------------------------------
# Calculations and Visualization
# -------------------------------

# --------------------------------------------------------------------
# Comparative Analysis of Ride Distribution: Casual vs. Member Users
# --------------------------------------------------------------------

# library(dplyr)
# library(ggplot2)

# Summarize ride data by user type
trip_data_updated %>%
  group_by(user_type) %>% 
  summarise(
    ride_count = n(),
    ride_percentage = round((n() / nrow(trip_data_updated)) * 100, 2))

# Create a bar plot to visualize total rides by user type
ggplot(trip_data_updated, aes(user_type, fill=user_type),) +
  geom_bar() +
  labs(
    x="User Type", 
    y="Number of Rides", 
    title = "User Type Distribution: Casual vs. Member Riders") +
  scale_y_continuous(
    labels = function(x) format(x, scientific = FALSE)) +
  annotate("text", x = 1, y = 1800000, label = "1,970,463 / (36%)", color = "black", size = 3.5) +
  annotate("text", x = 2, y = 3350000, label = "3,509,441 / (64%)", color = "black", size = 3.5) +
  theme(
    axis.title.x = element_text(vjust = - 0.1),
    axis.title.y = element_text(vjust = 3.0)

# --------------------------------------------------------------
# Differential Analysis of Average Travel Distance by User Type
# --------------------------------------------------------------

# library(dplyr)
# library(ggplot2)

# Calculate average ride distance by user type
trip_data_updated %>% 
  group_by(user_type) %>% 
  drop_na() %>%
  summarise(
    average_ride_distance = mean(ride_distance)) %>%
  mutate(average_ride_distance = round(average_ride_distance, 2))
  
# Create a bar plot to visualize average ride distance by user type
trip_data_updated %>% 
  group_by(user_type) %>% 
  drop_na() %>%
  summarise(
    average_ride_distance = mean(ride_distance)) %>%
  mutate(average_ride_distance = round(average_ride_distance, 2)) %>% 
  ggplot() + 
  geom_col(mapping = aes(x = user_type, y = average_ride_distance, fill = user_type), show.legend = FALSE) +
  labs(
    x = "User Type", 
    y = "Distance (in miles)",
    title = "Average Travel Distance by User Type") +
  annotate("text", x = 1, y = 1.25, label = "1.35 miles", color = "black", size = 3.5) +
  annotate("text", x = 2, y = 1.25, label = "1.34 miles", color = "black", size = 3.5) +
  theme(
    axis.title.x = element_text(vjust = - 0.1),
    axis.title.y = element_text(vjust = 3.0))

# -------------------------------------------------------------------
# Overview of Ride Length Statistics (Average, Median, Max, and Min)
# -------------------------------------------------------------------

# library(dplyr)

# Summarize ride data
trip_data_updated %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2),
    median_length = round(median(ride_length_minute), 2),
    max_ride_length = round(max(ride_length_minute), 2),
    min_ride_length = round(min(ride_length_minute), 2))
    
# --------------------------------------------------------------------------------------------
# Comparative Analysis of Ride Length Statistics (Average, Median, Max, and Min) by User Type
# --------------------------------------------------------------------------------------------

# library(dplyr)

# Summarize ride data by user type
trip_data_updated %>%
  group_by(user_type) %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2),
    median_length = round(median(ride_length_minute), 2),
    max_ride_length = round(max(ride_length_minute), 2),
    min_ride_length = round(min(ride_length_minute), 2))

# -----------------------------------------------------------------
# Distribution of Total Rides by User Type across Days of the Week
# -----------------------------------------------------------------

# library(dplyr)
# library(ggplot2)

# Ensure 'day_of_week' is ordered correctly
trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday",
    "Sunday"))

# Summarize the number of rides by user type and day of the week
trip_data_updated %>% 
  group_by(user_type, day_of_week) %>%
  summarise(
    number_of_rides = n(), .groups="drop") %>% 
    arrange(user_type, day_of_week)

# Ensure 'day_of_week' is ordered correctly
trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday", 
    "Sunday"))

# Create a bar plot to visualize total rides by user type vs. day of the week
trip_data_updated %>%  
  group_by(user_type, day_of_week) %>% 
  summarise(
    number_of_rides = n(), .groups = "drop") %>% 
  arrange(user_type, day_of_week)  %>% 
  ggplot(aes(x = day_of_week, y = number_of_rides, fill = user_type)) +
  labs(
    x = "Day of Week", 
    y = "Number of Riders", 
    title = "Total Rides by User Type and Day of the Week") +
  geom_col(position = "dodge", width = 0.5) +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# ------------------------------------------------------------------------
# Comparison of Average Ride Length by User Type across Days of the Week
# ------------------------------------------------------------------------

# library(dplyr)
# library(ggplot2)

# Ensure 'day_of_week' is ordered correctly
trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday",
    "Sunday"))

# Summarize the number of rides and average ride length by user type and day of the week
trip_data_updated %>% 
  group_by(user_type, day_of_week) %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), 
    .groups = "drop")

# Ensure 'day_of_week' is ordered correctly
trip_data_updated$day_of_week <- ordered(
  trip_data_updated$day_of_week, 
  levels = c(
    "Monday", 
    "Tuesday", 
    "Wednesday", 
    "Thursday", 
    "Friday", 
    "Saturday",
    "Sunday"))

# Create a bar plot to visualize average ride length by user type and day of the week
trip_data_updated %>% 
  group_by(user_type, day_of_week) %>% 
  summarise(
    count = n(),
    average_ride_length = mean(ride_length_minute), .groups = "drop") %>% 
  ggplot(aes(x = day_of_week, y = average_ride_length, fill = user_type)) + 
  geom_col(position = "dodge", width = 0.4) + 
  labs(
    x = "Day of Week",
    y = "Ride Length (in minutes)",
    title = "Average Ride Length by User Type and Day of the Week") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))
   
# -------------------------------------------------------
# Trend Analysis of Total Rides by User Type Over Months
# -------------------------------------------------------

# library(dplyr)

# Ensure proper ordering of months
trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

# Summarize ride data by user type and month
trip_data_updated %>%  
  group_by(user_type, month) %>% 
  summarise(
    number_of_rides = n(), .groups = "drop") %>% 
  arrange(user_type, month)

# Ensure proper ordering of months
trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

# Create a plot total rides by user type and month
trip_data_updated %>%  
  group_by(user_type, month) %>% 
  summarise(
    number_of_rides = n(), .groups = "drop") %>% 
  arrange(user_type, month) %>% 
  ggplot(aes(x = month, y = number_of_rides, color = user_type, group = user_type)) +
  labs(
    x = "Month", 
    y = "Number of Riders", 
    title = "Total Rides by User Type Over Months") +
  geom_line() +  # Add lines
  geom_point() +  # Add points
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0),
    axis.text.x = element_text(angle = 45, hjust = 1))

# -------------------------------------------------------------
# Comparison of Average Ride Length by User Type Across Months
# -------------------------------------------------------------

# library(dplyr)
# library(ggplot2)

# Ensure proper ordering of months
trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

# Summarize ride data by user type and month
trip_data_updated %>% 
  group_by(user_type, month) %>%
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups = "drop") %>% 
  arrange(user_type, month)

# Ensure proper ordering of months
trip_data_updated$month <- ordered(
  trip_data_updated$month, 
  levels=c(
    "January", 
    "February", 
    "March", 
    "April", 
    "May", 
    "June", 
    "July", 
    "August", 
    "September", 
    "October", 
    "November", 
    "December"))

# Create a plot average rides by user type and month
trip_data_updated %>% 
  group_by(user_type, month) %>%
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups = "drop") %>% 
  arrange(user_type, month) %>% 
  ggplot(aes(x = month, y = average_ride_length, fill = user_type)) +
  labs(
    x = "Month", 
    y = "Ride Length (in minutes)", 
    title = "Average Ride Length by User Type Across Months") +
  geom_col(position = "dodge", width = 0.5) +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0),
    axis.text.x = element_text(angle = 45, hjust = 1))

# ---------------------------------------------------------------
# Comparison of Total Rides by User Type Across Hours of the Day
# ---------------------------------------------------------------

# library(dplyr)
# library(ggplot2)

# Group data by user type and hour of the day, calculate the count of rides, and arrange the results
trip_data_updated %>% 
  group_by(user_type, hour) %>% 
  summarise(
    count = n(), .groups = "drop") %>%
  arrange(user_type, hour)

# Create a grouped bar plot to visualize the total number of rides by user type and hour of the day
trip_data_updated %>% 
  group_by(user_type, hour) %>% 
  summarise(
    count = n(), .groups = "drop") %>%
  arrange(user_type, hour) %>% 
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  labs(
    x = "Hour of day", 
    y = "Number of Rides", 
    title = "Total Rides by User Type Across Hours of the Day") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# -----------------------------------------------------------------------
# Comparison of Average Ride Length by User Type Across Hours of the Day
# -----------------------------------------------------------------------

# library(dplyr)
# library(ggplot2)

# Group data by user type and hour of the day, calculate count and average ride length, and arrange the results
trip_data_updated %>% 
  group_by(user_type, hour) %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups="drop") %>%
  arrange(user_type, hour)
  
# Create a grouped bar plot to visualize the average ride length by user type and hour of the day
trip_data_updated %>% 
  group_by(user_type, hour) %>% 
  summarise(
    average_ride_length = round(mean(ride_length_minute), 2), .groups="drop") %>%
  arrange(user_type, hour) %>% 
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = average_ride_length, fill = user_type)) + 
  geom_col(position = "dodge") +
  labs(
    x = "Hour of day", 
    y = "Ride Length (in minutes)", 
    title = "Average Ride Length by User Type Across Hours of the Day") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# --------------------------------------------------------
# Distribution of Bike Demand per Hour by Day of the Week
# --------------------------------------------------------

# library(dplyr)
# library(ggplot2)

# Count of rides by day of the week, hour, and user type
trip_data_updated %>%
  group_by(day_of_week, hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop")

# Visualize bike demand per hour by day of the week
trip_data_updated %>%
  group_by(day_of_week, hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = hour, y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour by Day of the Week") +
  facet_wrap(~ day_of_week) +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Monday
trip_data_updated %>%
  filter(day_of_week == "Monday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Monday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Tuesday
trip_data_updated %>%
  filter(day_of_week == "Tuesday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Tuesday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Wednesday
trip_data_updated %>%
  filter(day_of_week == "Wednesday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Wednesday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Thursday
trip_data_updated %>%
  filter(day_of_week == "Thursday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Thursday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Friday
trip_data_updated %>%
  filter(day_of_week == "Friday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Friday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Saturday
trip_data_updated %>%
  filter(day_of_week == "Saturday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Saturday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# Visualize bike demand per hour on Sunday
trip_data_updated %>%
  filter(day_of_week == "Sunday") %>%
  group_by(hour, user_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = factor(hour, levels = c(0:23)), y = count, fill = user_type)) +
  geom_col(position = "dodge") +
  labs(
    x = "Hour of the Day", 
    y = "Number of Rides", 
    title = "Bike Demand per Hour on Sunday") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# -----------------------------------------
# Distribution of User Types Over Quarters
# -----------------------------------------

# library(dplyr)
# library(ggplot2)

# Summarizing the number of users by quarter and user type
trip_data_updated %>%
  group_by(quarter, user_type) %>%
  summarise(
    number_of_users = n(), .groups = "drop")

# Creating a stacked line chart to visualize the distribution of user types by quarter
trip_data_updated %>%
  group_by(quarter, user_type) %>%
  summarise(number_of_users = n(), .groups = "drop") %>%
  ggplot(aes(x = quarter, y = number_of_users, color = user_type)) +
  geom_line() +
  geom_point() +
  labs(
    x = "Quarter", 
    y = "Number of Riders", 
    title = "Distribution of User Types Over Quarters") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))

# -----------------------------------------------------------
# Comparison of Rideable Types and Total Rides by User Types
# -----------------------------------------------------------

# library(dplyr)
# library(ggplot2)

# Calculate the count of rides for each combination of user type and rideable type
trip_data_updated %>%
  group_by(user_type, rideable_type) %>%
  summarise(
    count = n(), .groups = "drop")

# Plot the count of rides for each combination of user type and rideable type
trip_data_updated %>%
  group_by(user_type, rideable_type) %>%
  summarise(
    count = n(), .groups = "drop") %>%
  ggplot(aes(x = rideable_type, y = count, fill = user_type)) +
  labs(
    x = "Rideable Type", 
    y = "Number of Rides", 
    title = "Rideable Type Vs. Total Rides by User Types") +
  geom_col(position = "dodge") +
  theme(
    axis.title.x = element_text(vjust = - 1.0),
    axis.title.y = element_text(vjust = 3.0))
 
# ------------------------------------------------
# Visualization of Most Used Routes by Rider Type
# ------------------------------------------------

# library(dplyr)
# library(ggplot2)
# library(ggmap)

# Filter out rides with the same start and end coordinates
coordinates_df <- trip_data_updated %>%
  filter(start_lng != end_lng & start_lat != end_lat) %>%
  group_by(start_lng, start_lat, end_lng, end_lat, user_type, rideable_type) %>%
  summarise(
    total_rides = n(), .groups = "drop") %>%
  filter(total_rides > 200)

# Separate data for casual and member riders
casual_riders <- coordinates_df %>% filter(user_type == "casual")
member_riders <- coordinates_df %>% filter(user_type == "member")

# Define bounding box for Chicago
chicago <- c(left = -87.7738, bottom = 41.8096, right = -87.554855, top = 41.9653)
# Get map of Chicago
chicago_map <- get_stadiamap(bbox = chicago, zoom = 12, maptype = "stamen_terrain")

# Plot most used routes by casual riders on the map
ggmap(chicago_map, darken = c(0.1, "white")) +
   geom_point(data = casual_riders, aes(x = start_lng, y = start_lat, color = rideable_type), size = 2) +
   coord_fixed(0.8) +
   labs(
     x = NULL, 
     y = NULL, 
     title = "Most Used Routes by Casual Riders") +
   theme(legend.position = "right") +  # Position the legend
   scale_color_discrete(name = "Rideable Type")  # Add legend with discrete colors

# Plot most used routes by member riders on the map
ggmap(chicago_map, darken = c(0.1, "white")) +
    geom_point(data = member_riders, aes(x = start_lng, y = start_lat, color = rideable_type), size = 2) +  
    coord_fixed(0.8) +
    labs(
      x = NULL, 
      y = NULL,
      title = "Most Used Routes by Member Riders") +
    theme(legend.position = "right") +  # Position the legend
    scale_color_discrete(name = "Rideable Type")
