######################
# The 'Process' Phase
######################

# -------------------
# Installing Packages
# -------------------

# Install required packages
install.packages("tidyverse")  # Data manipulation and visualization.
install.packages("janitor")     # Simplifies data cleaning.
install.packages("readr")       # Reads flat files.
install.packages("dplyr")       # Data manipulation.
install.packages("lubridate")   # Date and time handling.
install.packages("tidyr")       # Tidying data.
install.packages("ggplot2")     # Graphics creation.
install.packages("geosphere")   # Earth distance computations.
install.packages("skimr")       # Summary statistics.
install.packages("leaflet")     # Interactive maps.
install.packages("htmltools")   # HTML generation.
install.packages("leaflet.extras")  # Additional leaflet features.

# ---------------
# Library Loading
# ---------------

# Load required libraries
library(tidyverse)      # Data manipulation and visualization.
library(janitor)        # Simplifies data cleaning.
library(readr)          # Reads flat files.
library(dplyr)          # Data manipulation.
library(lubridate)      # Date and time handling.
library(tidyr)          # Tidying data.
library(ggplot2)        # Graphics creation.
library(geosphere)      # Earth distance computations.
library(skimr)          # Summary statistics.
library(leaflet)        # Interactive maps.
library(htmltools)      # HTML generation.
library(leaflet.extras) # Additional leaflet features.

# -----------
# Data Import
# -----------

# Read CSV files for each month in 2023
jan2023 <- read_csv("202301-divvy-tripdata.csv")
feb2023 <- read_csv("202302-divvy-tripdata.csv")
mar2023 <- read_csv("202303-divvy-tripdata.csv")
apr2023 <- read_csv("202304-divvy-tripdata.csv")
may2023 <- read_csv("202305-divvy-tripdata.csv")
jun2023 <- read_csv("202306-divvy-tripdata.csv")
jul2023 <- read_csv("202307-divvy-tripdata.csv")
aug2023 <- read_csv("202308-divvy-tripdata.csv")
sep2023 <- read_csv("202309-divvy-tripdata.csv")
oct2023 <- read_csv("202310-divvy-tripdata.csv")
nov2023 <- read_csv("202311-divvy-tripdata.csv")
dec2023 <- read_csv("202312-divvy-tripdata.csv")

# ----------------
# Data Exploration
# ----------------

# Display column names for each month's dataframe
colnames(jan2023)
colnames(feb2023)
colnames(mar2023)
colnames(apr2023)
colnames(may2023)
colnames(jun2023)
colnames(jul2023)
colnames(aug2023)
colnames(sep2023)
colnames(oct2023)
colnames(nov2023)
colnames(dec2023)

# Display the structure of each month's data frame
str(jan2023)
str(feb2023)
str(mar2023)
str(apr2023)
str(may2023)
str(jun2023)
str(jul2023)
str(aug2023)
str(sep2023)
str(oct2023)
str(nov2023)
str(dec2023)

# Display summary statistics for each month's data frame
summary(jan2023)
summary(feb2023)
summary(mar2023)
summary(apr2023)
summary(may2023)
summary(jun2023)
summary(jul2023)
summary(aug2023)
summary(sep2023)
summary(oct2023)
summary(nov2023)
summary(dec2023)

# ------------------
# Data Consolidation
# ------------------

# Combine all monthly data frames into one
trip_data <- bind_rows(
  list(
    jan2023, 
    feb2023, 
    mar2023, 
    apr2023, 
    may2023, 
    jun2023, 
    jul2023, 
    aug2023, 
    sep2023, 
    oct2023, 
    nov2023, 
    dec2023
  )
)

# Remove individual monthly data frames from the environment
rm(
  list = c(
    "jan2023", 
    "feb2023", 
    "mar2023", 
    "apr2023", 
    "may2023", 
    "jun2023", 
    "jul2023", 
    "aug2023", 
    "sep2023", 
    "oct2023", 
    "nov2023", 
    "dec2023"
  )
)

# -----------------------------
# Consolidated Data Exploration
# -----------------------------

# Check the class of the combined trip data
class(trip_data)

# Check the dimensions of the combined trip data
dim(trip_data)

# Display column names of the combined trip data
colnames(trip_data)

# Count the number of missing values in each column of the combined trip data
colSums(is.na(trip_data))

# Get the number of rows in the combined trip data
nrow(trip_data)

# Get the number of columns in the combined trip data
ncol(trip_data)

# Get the names of columns in the combined trip data
names(trip_data)

# Display the first few rows of the combined trip data
head(trip_data)

# Display the last few rows of the combined trip data
tail(trip_data)

# Display the structure of the combined trip data
str(trip_data)

# Display a concise summary of the combined trip data
glimpse(trip_data)

# Display summary statistics of the combined trip data without charts
skim_without_charts(trip_data)

# Display summary statistics of the combined trip data
summary(trip_data)

# ----------------------
# Missing Value Analysis
# ----------------------

# Attach the combined trip data to the search path
attach(trip_data)

# Display rows where ride_id is NA in the combined trip data
trip_data[is.na(ride_id),]

# Display rows where rideable_type is NA in the combined trip data
trip_data[is.na(rideable_type),]

# Display rows where started_at is NA in the combined trip data
trip_data[is.na(started_at),]

# Display rows where ended_at is NA in the combined trip data
trip_data[is.na(ended_at),]

# Display rows where start_station_name is NA in the combined trip data
trip_data[is.na(start_station_name),]

# Display rows where start_station_id is NA in the combined trip data
trip_data[is.na(start_station_id),]

# Display rows where end_station_name is NA in the combined trip data
trip_data[is.na(end_station_name),]

# Display rows where end_station_id is NA in the combined trip data
trip_data[is.na(end_station_id),]

# Display rows where start_lat is NA in the combined trip data
trip_data[is.na(start_lat),]

# Display rows where start_lng is NA in the combined trip data
trip_data[is.na(start_lng),]

# Display rows where end_lat is NA in the combined trip data
trip_data[is.na(end_lat),]

# Display rows where end_lng is NA in the combined trip data
trip_data[is.na(end_lng),]

# Display rows where member_casual is NA in the combined trip data
trip_data[is.na(member_casual),]

# Detach the combined trip data from the search path
detach(trip_data)

# -------------------
# Data Transformation
# -------------------

# Renaming column "member_casual" to "user_type"
trip_data <- rename(trip_data, "user_type" = "member_casual")

# Converting "started_at" and "ended_at" columns to POSIXct format
trip_data$started_at <- ymd_hms(trip_data$started_at)
trip_data$ended_at <- ymd_hms(trip_data$ended_at)

# Checking for missing values
sum(is.na(trip_data$started_at)) # in "started_at" column
sum(is.na(trip_data$ended_at)) # in "ended_at" column

# ----------------
# Data Preparation
# ----------------

# Rounding latitude and longitude coordinates to two decimal places
trip_data <- trip_data %>%
  mutate(
    start_lat = round(start_lat, digits = 2),
    start_lng = round(start_lng, digits = 2),
    end_lat = round(end_lat, digits = 2),
    end_lng = round(end_lng, digits = 2)
  )

# Converting "started_at" date-time column to date format
trip_data <- trip_data %>%
  mutate(date = as.Date(started_at))

# Extracting month from the "date" column
trip_data <- trip_data %>%
  mutate(month = format(date, "%B"))

# Extracting day from the "date" column
trip_data <- trip_data %>%
  mutate(day = format(date, "%d"))

# Extracting year from the "date" column
trip_data <- trip_data %>%
  mutate(year = format(date, "%Y"))

# Extracting day of the week from the "date" column
trip_data <- trip_data %>%
  mutate(day_of_week = format(date, "%A"))

# Extracting hour from the "started_at" date-time column
trip_data <- trip_data %>%
  mutate(hour = hour(started_at))

# Extracting quarter from the "started_at" date-time column
trip_data <- trip_data %>%
  mutate(quarter = quarter(started_at))

# --------------------------
# Analyzing Ride Length Data
# --------------------------

# Calculating and Adding Ride Length in Minutes (rounding to two decimal places)
trip_data <- trip_data %>% 
  mutate(ride_length_minute = round(as.numeric(difftime(ended_at, started_at, units = "mins")), 2))

# Checking the class of the "ride_length_minute" variable
class(trip_data$ride_length_minute)

# Counting rides with duration less than 1 minute (60 seconds)
sum(trip_data$ride_length_minute < 1, na.rm = TRUE)

# Counting rides with duration more than 24 hours (1440 minutes)
sum(trip_data$ride_length_minute > 1440, na.rm = TRUE)

# Counting rides with non-positive duration (less than or equal to 0)
sum(trip_data$ride_length_minute <= 0, na.rm = TRUE)

# Checking for rides where start time is after end time
sum(trip_data$started_at > trip_data$ended_at, na.rm = TRUE)

# Counting rides where start time is after end time using another method
length(which(trip_data$started_at > trip_data$ended_at))

# -------------------------------------------
# Missing Values Analysis and Data Imputation
# -------------------------------------------

# Checking missing values in specific columns
colSums(is.na(trip_data[c(
  "start_station_name", 
  "start_station_id", 
  "end_station_name", 
  "end_station_id", 
  "end_lat", 
  "end_lng")]))

# Filling missing values for start station name by grouping start latitude and longitude
trip_data <- trip_data %>%
  group_by(start_lat, start_lng) %>%
  fill(start_station_name, .direction = "downup") %>%
  ungroup()

# Filling missing values for end station name by grouping end latitude and longitude
trip_data <- trip_data %>%
  group_by(end_lat, end_lng) %>%
  fill(end_station_name, .direction = "downup") %>%
  ungroup()

# Filling missing values for start station ID by grouping start station name
trip_data <- trip_data %>%
  group_by(start_station_name) %>%
  fill(start_station_id, .direction = "downup") %>%
  ungroup()

# Filling missing values for end station ID by grouping end station name
trip_data <- trip_data %>%
  group_by(end_station_name) %>%
  fill(end_station_id, .direction = "downup") %>%
  ungroup()

# Rechecking missing values in specific columns after filling
colSums(is.na(trip_data[c(
  "start_station_name", 
  "start_station_id", 
  "end_station_name", 
  "end_station_id", 
  "end_lat", 
  "end_lng")]))
  
# -----------------------------
# Processing Ride Distance Data
# -----------------------------

# Calculating and Adding Ride Distance using Great Circle Formula
trip_data$ride_distance <- distGeo(
  matrix(c(trip_data$start_lng, trip_data$start_lat), ncol = 2),
  matrix(c(trip_data$end_lng, trip_data$end_lat), ncol = 2))

# Converting Meters to Kilometers
trip_data$ride_distance <- trip_data$ride_distance / 1000

# Converting and Updating Kilometers to Miles
trip_data$ride_distance <- trip_data$ride_distance * 0.621371

# -------------------------
# Stations Data Exploration
# -------------------------

# Counting the number of rides per start station ID and arranging them in descending order
trip_data %>% 
  select(start_station_id) %>% 
  count(start_station_id) %>% 
  arrange(desc(n))

# Counting the number of rides per end station ID and arranging them in descending order
trip_data %>% 
  select(end_station_id) %>% 
  count(end_station_id) %>% 
  arrange(desc(n))
  
# Counting the number of rides for specific start stations
trip_data %>% filter(
  start_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  )
) %>% 
  count(start_station_id)

# Counting the number of rides for specific end stations
trip_data %>% filter(
  end_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  )
) %>% 
  count(end_station_id)
  
# -------------
# Data Cleaning
# -------------

# Filtering trip data to include rides with a duration between 1 minute and 1440 minutes (24 hours)
# Storing the filtered data into a new data frame
trip_data_updated <- trip_data %>% 
  filter(ride_length_minute >= 1 & ride_length_minute <= 1440)

# Removing rows with missing end latitude and longitude coordinates
trip_data_updated <- trip_data_updated[!is.na(trip_data_updated$end_lat) & !is.na(trip_data_updated$end_lng), ]

# Filtering out specific start stations from the trip data
trip_data_updated <- trip_data_updated %>% 
  filter(!
  start_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  ))

# Filtering out specific end stations from the trip data
trip_data_updated <- trip_data_updated %>% 
  filter(!
  end_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  ))

# ---------------------------------
# Revisiting Filtered Data Analysis
# ---------------------------------

# Counting rides less than 1 minute
sum(trip_data_updated$ride_length_minute < 1)

# Counting rides more than 24 hours (or 1440 minutes)
sum(trip_data_updated$ride_length_minute > 1440)

# Counting number of instances where (started_at) is after (ended_at)
length(which(trip_data_updated$started_at > trip_data_updated$ended_at)) 

# Counting specific start stations from the trip data
trip_data_updated %>% filter(
  start_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  )
) %>% 
  count(start_station_id)

# Counting specific end stations from the trip data 
 trip_data_updated %>% filter(
  end_station_id %in% c (
    "OH - BONFIRE - TESTING",
    "Hubbard Bike-checking (LBS-WH-TEST)",
    "chargingstx4",
    "chargingstx2",
    "chargingstx07",
    "chargingstx0",
    "chargingstx5",
    "chargingstx3",
    "chargingstx1",
    "chargingstx06",
    "OH Charging Stx - Test",
    "2059 Hastings Warehouse Station",
    "DIVVY CASSETTE REPAIR MOBILE STATION"
  )
) %>% 
  count(end_station_id)

# -------------------------------------
# Final Data Exploration and Validation
# -------------------------------------

# Get the number of columns in the updated data frame
ncol(trip_data_updated)

# Get the number of rows in the updated data frame
nrow(trip_data_updated)

# Display a concise summary of the updated data frame
glimpse(trip_data_updated)

# Display summary statistics of the updated data frame
summary(trip_data_updated)

# Count the number of missing values in each column of the updated data frame
colSums(is.na(trip_data_updated))
